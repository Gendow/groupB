package gui;

import java.awt.event.MouseEvent;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Scanner;

import javax.swing.JTable;

import org.json.JSONObject;

import processing.core.PApplet;
import de.fhpotsdam.unfolding.UnfoldingMap;
import de.fhpotsdam.unfolding.events.EventDispatcher;
import de.fhpotsdam.unfolding.geo.Location;
import de.fhpotsdam.unfolding.interactions.MouseHandler;
import de.fhpotsdam.unfolding.marker.SimplePointMarker;
import de.fhpotsdam.unfolding.providers.OpenStreetMap;
import de.fhpotsdam.unfolding.utils.MapUtils;
import event.EventList;

public class MapApplet extends PApplet {
	
	private SimplePointMarker marker;
	private EventDispatcher eventDispatcher;
//	private List<Marker> EventMarkers = new ArrayList<Marker>();
	static UnfoldingMap map;
	
	public void setup() {
		size(960, 800);
		
		map = new UnfoldingMap(this, new OpenStreetMap.OpenStreetMapProvider());
	    map.zoomAndPanTo(12, new Location(51.930, 5.660));
	        
	    MapUtils.createDefaultEventDispatcher(this, map);
	    	 
	     
	    
	}
	 
	public void draw() {
		size(960, 800);
			
		map.draw();

		map.setZoomRange(7, 18);
		int zoom = map.getZoomLevel();
		if (zoom < 15) {
			map.setTweening(true);	
		} else {
			map.setTweening(false);
		}
		Location mouseLoc = map.getLocation(mouseX, mouseY);
		text(mouseLoc.getLat()+ " " + mouseLoc.getLon(), mouseX, mouseY);
		
	}
			
	// HTTP GET request
	public void sendGet() throws Exception {
	
		for (int i = 0; i < EventList.listOfEvents.size(); i++) {
			String address = EventList.listOfEvents.get(i).getLocation();
			
			String url = String.format("https://maps.googleapis.com/maps/api/geocode/json?address={%s}", address.replace(" ", "+"));
			URL obj = new URL(url);
			HttpURLConnection con = (HttpURLConnection) obj.openConnection();
			con.setRequestMethod("GET");
			
			// read from the URL
			Scanner scan = new Scanner(obj.openStream());
			String str = new String();
			while (scan.hasNext())
				str += scan.nextLine();
			scan.close();
			JSONObject location = new JSONObject(str);
			double lat = location.getJSONArray("results").getJSONObject(0)
					.getJSONObject("geometry").getJSONObject("location").getDouble("lat");
			double lng = location.getJSONArray("results").getJSONObject(0)
					.getJSONObject("geometry").getJSONObject("location").getDouble("lng");
			Location haarwegWageningen = new Location(lat, lng);
			marker = new SimplePointMarker(haarwegWageningen);
			marker.setId(EventList.listOfEvents.get(i).getEventID());
			map.addMarker(marker);
			marker.setStrokeWeight(5);
			marker.setStrokeColor(color(255, 0, 0, 100));
			marker.setColor(color(255, 0, 0, 100));
			System.out.println(marker.getId());
		}
	}
//		MouseHandler checkClick = new MouseHandler(this, map);
			
			

		public void mouseClicked(MouseEvent evt) {
			if (evt.getClickCount() == 1) {
				if (marker.getId().equals(EventList.listOfEvents.get(4).getEventID())) {
					EventListPanel.selectedEvent = EventList.listOfEvents.get(4).getEventID();
					ViewEvent viewEvent = new ViewEvent();
				}
				System.out.println(marker.getId());
			}
			
			if(evt.getClickCount() == 2) {
				ReportEventDialog reportEvent = new ReportEventDialog();
			}
		}
			
			
		
		
		
		
			
		
	}			

